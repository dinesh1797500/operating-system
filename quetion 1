#include <stdio.h>

#define NUM_PROCESSES 4
#define NUM_RESOURCES 3

int main() {
    int claim[NUM_PROCESSES][NUM_RESOURCES] = {{3, 2, 2}, {6, 1, 3}, {3, 1, 4}, {4, 2, 2}};
    int allocation[NUM_PROCESSES][NUM_RESOURCES] = {{1, 0, 0}, {6, 1, 2}, {2, 1, 1}, {0, 0, 2}};
    int available[NUM_RESOURCES] = {9, 3, 6};
    int work[NUM_RESOURCES];
    int finish[NUM_PROCESSES] = {0};
    int safe_sequence[NUM_PROCESSES];
    int num_safe = 0;

    // Initialize work to available
    for (int i = 0; i < NUM_RESOURCES; i++) {
        work[i] = available[i];
    }

    // Loop until all processes are finished or no safe sequence exists
    while (num_safe < NUM_PROCESSES) {
        int found = 0;

        // Look for an unfinished process whose claim can be satisfied
        for (int i = 0; i < NUM_PROCESSES; i++) {
            if (!finish[i]) {
                int can_allocate = 1;
                for (int j = 0; j < NUM_RESOURCES; j++) {
                    if (claim[i][j] - allocation[i][j] > work[j]) {
                        can_allocate = 0;
                        break;
                    }
                }
                if (can_allocate) {
                    // Allocate resources to process i
                    for (int j = 0; j < NUM_RESOURCES; j++) {
                        work[j] += allocation[i][j];
                    }
                    finish[i] = 1;
                    safe_sequence[num_safe] = i;
                    num_safe++;
                    found = 1;
                    break;
                }
            }
        }

        if (!found) {
            // No process can be satisfied, so no safe sequence exists
            printf("Unsafe state\n");
            return 0;
        }
    }

    // A safe sequence exists
    printf("Safe sequence:");
    for (int i = 0; i < NUM_PROCESSES; i++) {
        printf(" %d", safe_sequence[i]);
    }
    printf("\n");

    return 0;
}
